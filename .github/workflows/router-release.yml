name: Release Router.
on:
  workflow_dispatch:
    inputs:
      release_version:
        required: true
        type: string
        description: "Release Version"
      next_version:
        type: string
        description: "Next Development Version"
  pull_request_target:
    types:
      - closed
    paths:
      - '**/gateway/router**'
    branches:
      - 'main'
concurrency:
  group: ${{ github.event.number }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout apk-repo
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          path: apk-repo
          token: ${{ secrets.WSO2_BOT_TOKEN }}
      - name: Set release username and email
        shell: sh
        run: |
          git config --global user.name ${{ secrets.WSO2_BOT_USER }}
          git config --global user.email ${{ secrets.WSO2_BOT_EMAIL }}
      - name: Run Gradle build
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd apk-repo/gateway/router
          gradle release -Prelease.useAutomaticVersion=true -Pdocker_organization=${{ secrets.DOCKER_ORGANIZATION }} -Pdocker_username=${{ secrets.DOCKER_USERNAME }} -Pdocker_password=${{ secrets.DOCKER_PASSWORD }} -Prelease.releaseVersion=${{ github.event.inputs.release_version }} -Prelease.newVersion=${{ github.event.inputs.next_version }} -PmultiArch=true
      - name: Run Gradle Build
        run: |
          cd apk-repo/gateway/router
          gradle build -Pdocker_organization=${{ secrets.DOCKER_ORGANIZATION }} -Pdocker_username=${{ secrets.DOCKER_USERNAME }} -Pdocker_password=${{ secrets.DOCKER_PASSWORD }} -Pimage_version=latest -PmultiArch=true
      - name: Run Gradle Build
        if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          cd apk-repo/gateway/router
          gradle docker_push -Pdocker_organization=${{ secrets.DOCKER_ORGANIZATION }} -Pdocker_username=${{ secrets.DOCKER_USERNAME }} -Pdocker_password=${{ secrets.DOCKER_PASSWORD }} -Pimage_version=latest -PmultiArch=true
          gradle docker_push -Pdocker_organization=${{ secrets.DOCKER_ORGANIZATION }} -Pdocker_username=${{ secrets.DOCKER_USERNAME }} -Pdocker_password=${{ secrets.DOCKER_PASSWORD }} -Pimage_version=${{ github.sha }} -PmultiArch=true          